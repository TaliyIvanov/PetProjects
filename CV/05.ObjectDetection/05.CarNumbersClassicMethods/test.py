# import cv2
# import os
# import pytesseract
# import numpy as np
# from PIL import Image, ImageDraw  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Pillow: pip install Pillow

# cascade_path = os.path.join(cv2.data.haarcascades, "haarcascade_russian_plate_number.xml")
# nPlateCascade = cv2.CascadeClassifier(cascade_path)
# minArea = 200
# color = (255, 0, 255)

# cap = cv2.VideoCapture("data/videos/9.mp4")
# if cap is None or not cap.isOpened():
#     print("Video not found or cannot open. Please check the path.")
#     exit()

# width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
# height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
# scale = 1

# cap.set(3, width)
# cap.set(4, height)
# cap.set(10, 150)
# count = 0
# recognized_plates = {}

# while True:
#     success, img = cap.read()
#     if not success:
#         break
#     img = cv2.flip(img, -1)
#     img = cv2.resize(img, (int(width * scale), int(height * scale)))
#     imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#     numberPlates = nPlateCascade.detectMultiScale(imgGray, 1.1, 10)
#     for (x, y, w, h) in numberPlates:
#         area = w * h
#         if area > minArea:
#             cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 255), 2)
#             cv2.putText(img, "Number Plate", (x, y - 5),
#                         cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, color, 2)
#             imgRoi = img[y:y + h, x:x + w]

#             # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ ROI
#             imgGrayRoi = cv2.cvtColor(imgRoi, cv2.COLOR_BGR2GRAY)
#             # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
#             imgThresh = cv2.adaptiveThreshold(imgGrayRoi, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)

#             # –†–∞–∑–º—ã—Ç–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
#             # imgThresh = cv2.medianBlur(imgThresh, 3)

#             # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—ç—Ä–æ–∑–∏—è –∏ –¥–∏–ª–∞—Ç–∞—Ü–∏—è)
#             kernel = np.ones((2, 2), np.uint8)
#             imgErode = cv2.erode(imgThresh, kernel, iterations=1)
#             imgDilate = cv2.dilate(imgErode, kernel, iterations=1)
#             roi_pil = Image.fromarray(imgDilate)


#             # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ imgDilate –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–∏–ª–∏ imgErode, –µ—Å–ª–∏ –ª—É—á—à–µ)
#             cv2.imshow("ROI", imgRoi)
#             cv2.imshow("ROI_Threshold", imgDilate)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

#     # cv2.imshow("Result", img)

#     key = cv2.waitKey(1) & 0xFF
#     if key == ord('s'):
#         if 'imgRoi' in locals():
#             filename = f"NoPlate_{count}.jpg"
#             save_path = os.path.join("Resources/Scanned", filename)
#             cv2.imwrite(save_path, imgDilate)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ ROI

#             # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
#             try:
#                 plate_text = pytesseract.image_to_string(imgDilate, lang='rus', config='--psm 8 --oem 13')
#                 plate_text = ''.join(filter(str.isalnum, plate_text))
#                 recognized_plates[filename] = plate_text
#                 print(f"Saved: {filename} | Text: {plate_text}")
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
#                 plate_text = "Error"
#                 recognized_plates[filename] = plate_text

#             # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
#             img_pil = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
#             draw = ImageDraw.Draw(img_pil)
#             draw.text((x, y - 20), plate_text, fill=(0, 255, 0))
#             img = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
#             # cv2.imshow("Result", img)

#             cv2.rectangle(img, (0, 200), (640, 300), (0, 255, 0), cv2.FILLED)
#             cv2.putText(img, "Scan Saved", (150, 265), cv2.FONT_HERSHEY_DUPLEX,
#                         2, (0, 0, 255), 2)
#             # cv2.imshow("Result", img)
#             cv2.waitKey(500)
#             count += 1
#         else:
#             print("No number plate detected to save.")
#     elif key == ord('q'):
#         print("Exiting...")
#         break

# cap.release()
# cv2.destroyAllWindows()

# print("\nüìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:")
# for file, number in recognized_plates.items():
#     print(f"{file}: {number}")

# test for pytesseract


import pytesseract
from PIL import Image  # pip install Pillow

try:
    image = Image.open("data/images/5.jpg")  # –ó–∞–º–µ–Ω–∏—Ç–µ "test.png" –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    text = pytesseract.image_to_string(image, lang='rus')
    print(text)
except Exception as e:
    print(f"Error: {e}")


"""
pytesseract on russian work correct
but he cant to understand detected numbers, i must use Networks

–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏ –≤ –¢‚Äî–ñ.
–ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Å–∫–æ–ª—å–∫–æ
–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –≤ –Ω–∞–±–æ—Ä –±—É–∫–≤ –∏ —Å–∫–æ–ª—å–∫–æ –≤–æ–æ–±—â–µ –Ω–µ —É–∑–Ω–∞–µ—Ç:

1. –ù–∞–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ‚Ññ 1.
2. –ï—â–µ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä —Å–ª–æ–≤.

3. –¢—Ä–µ—Ç–∏–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤–æ.

4. –≠–∫—Å–ø—Ä–µ—Å—Å–∏—è -‚Äî —á–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–ª–æ–≤–æ.

5. –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—è—Ç–æ–µ —Å–ª–æ–≤–æ.
"""

